"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const postcss_preset_env_1 = __importDefault(require("postcss-preset-env"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const react_refresh_webpack_plugin_1 = __importDefault(require("@pmmmwh/react-refresh-webpack-plugin"));
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const css_minimizer_webpack_plugin_1 = __importDefault(require("css-minimizer-webpack-plugin"));
const dotenv_webpack_1 = __importDefault(require("dotenv-webpack"));
const isServe = process.env.NODE_ENV === "serve";
const isDev = process.env.NODE_ENV === "development" || isServe;
const isProd = process.env.NODE_ENV === "production";
const imagesFileName = "img/[name][ext]";
const fontsFileName = "fonts/[name][ext]";
const cssFileName = "css/[name].css";
const dotenvPath = isDev ? "./.env.development" : "./.env.production";
const plugins = [
    new html_webpack_plugin_1.default({
        filename: "index.html",
        template: "src/templates/index.html",
    }),
    new mini_css_extract_plugin_1.default({ filename: cssFileName }),
    new dotenv_webpack_1.default({
        path: dotenvPath,
    }),
];
if (isServe) {
    plugins.push(new react_refresh_webpack_plugin_1.default());
}
const optimization = () => {
    const config = {
        splitChunks: {
            chunks: "all",
        },
    };
    if (isProd) {
        config.minimizer = [new terser_webpack_plugin_1.default(), new css_minimizer_webpack_plugin_1.default()];
    }
    return config;
};
const cssLoaders = () => {
    const miniCssExtractPluginLoader = {
        loader: mini_css_extract_plugin_1.default.loader,
    };
    const cssLoader = {
        loader: "css-loader",
    };
    const postCssLoader = {
        loader: "postcss-loader",
        options: {
            postcssOptions: {
                plugins: [postcss_preset_env_1.default],
            },
        },
    };
    const sassLoader = {
        loader: "sass-loader",
    };
    const loaders = [miniCssExtractPluginLoader, cssLoader, postCssLoader, sassLoader];
    return loaders;
};
module.exports = {
    target: "web",
    mode: (isProd && "production") || (isDev && "development") || "development",
    resolve: {
        extensions: [".js", ".ts", ".jsx", ".tsx"],
        alias: {
            "@": path_1.default.resolve(__dirname, "src"),
            "@@": path_1.default.resolve(__dirname, "./"),
        },
    },
    entry: {
        index: "./src/index.tsx",
    },
    output: {
        filename: "js/[name].js",
        path: path_1.default.resolve(__dirname, "dist"),
        clean: true,
        publicPath: "/",
    },
    devServer: {
        client: {
            overlay: {
                warnings: false,
                errors: true,
            },
        },
        port: 8000,
        historyApiFallback: true,
    },
    plugins,
    module: {
        rules: [
            {
                test: /\.scss$/i,
                use: cssLoaders(),
                generator: {
                    filename: cssFileName,
                },
            },
            {
                test: /\.(png|svg|jpg|jpeg|gif)$/i,
                type: "asset/resource",
                generator: {
                    filename: imagesFileName,
                },
            },
            {
                test: /\.(woff|woff2|eot|ttf|otf)$/i,
                type: "asset/resource",
                generator: {
                    filename: fontsFileName,
                },
            },
            {
                test: /\.[jt]s?/,
                loader: "ts-loader",
                options: {
                    transpileOnly: isProd,
                    // transpileOnly: true,
                },
                exclude: [/node_modules/, /\.(json)/],
            },
        ],
    },
    optimization: optimization(),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VicGFjay5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi93ZWJwYWNrLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUN4Qiw0RUFBa0Q7QUFDbEQsOEVBQW9EO0FBQ3BELHNGQUEyRDtBQUMzRCx3R0FBc0U7QUFDdEUsa0ZBQWlEO0FBQ2pELGdHQUE4RDtBQUM5RCxvRUFBb0M7QUFHcEMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDO0FBQ2pELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLGFBQWEsSUFBSSxPQUFPLENBQUM7QUFDaEUsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxDQUFDO0FBRXJELE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDO0FBQ3pDLE1BQU0sYUFBYSxHQUFHLG1CQUFtQixDQUFDO0FBQzFDLE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0FBRXRFLE1BQU0sT0FBTyxHQUFHO0lBQ2IsSUFBSSw2QkFBaUIsQ0FBQztRQUNuQixRQUFRLEVBQUUsWUFBWTtRQUN0QixRQUFRLEVBQUUsMEJBQTBCO0tBQ3RDLENBQUM7SUFDRixJQUFJLGlDQUFvQixDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO0lBQ25ELElBQUksd0JBQU0sQ0FBQztRQUNSLElBQUksRUFBRSxVQUFVO0tBQ2xCLENBQUM7Q0FDSixDQUFDO0FBRUYsSUFBSSxPQUFPLEVBQUU7SUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksc0NBQWtCLEVBQUUsQ0FBQyxDQUFDO0NBQ3pDO0FBSUQsTUFBTSxZQUFZLEdB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